
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()

local word1;
local w2;
local Dropdown;
local playerlist = {""}
for i,v in pairs(game.Players:GetPlayers())do
	if v ~= game.Players.LocalPlayer then
		table.insert(playerlist,v.Name)
	end
end
local function typeout(word)
	for i = 1, 5 do 
		local split1 = string.split(word, "")
		local r = game:GetService("Players").LocalPlayer.PlayerScripts.Main.Typed
		r:Fire(split1[i])
	end
end

local function play()
	pcall(function()
		local args = {
			[1] = {
				["Privacy"] = 0,
				["Words"] = 1,
				["TimerGame"] = 120,
				["Color"] = nil --[[Color3]],
				["Anchored"] = true,
				["Lockdown"] = true,
				["Letters"] = 5,
				["Guesses"] = 0,
				["Pre_Correct"] = 0,
				["Pre_Present"] = 0,
				["Players"] = 100,
				["TimerRows"] = 60
			},
			[2] = true,
			[3] = "Practice"
		}
		if Dropdown.CurrentOption == "" then
			for i,v in pairs(workspace.GameSlots:GetChildren()) do 
				if not v:FindFirstChildWhichIsA("Model") then
					game:GetService("ReplicatedStorage").Remotes.GoToSlot:FireServer(v)
					break
				end
			end
			game:GetService("ReplicatedStorage").Remotes.ChooseMode:FireServer(unpack(args))
			wait(1)
			game:GetService("ReplicatedStorage").Remotes.StartGame:FireServer(unpack(args))
		end
	end)
end

local Window = Rayfield:CreateWindow({
	Name = "Vocab Havoc",
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil,
		FileName = "Big Hub"
	},
	Discord = {
		Enabled = false,
		Invite = "sirius",
		RememberJoins = true 
	},
	KeySystem = false, 
})

local Tab = Window:CreateTab("Auto") 

local Section = Tab:CreateSection("Auto-Guess")

local Toggle1 = Tab:CreateToggle({
	Name = "On",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
	end,
})

local Slider = Tab:CreateSlider({
	Name = "Delay",
	Range = {0, 6},
	Increment = 1,
	Suffix = "Seconds",
	CurrentValue = 1,
	Flag = "Slider1",
	Callback = function(Value)

	end,
})


local Section = Tab:CreateSection("Auto-Play")

local Toggle2 = Tab:CreateToggle({
	Name = "On",
	CurrentValue = false,
	Flag = "Toggle2",
	Callback = function(Value)
		if Value == true then
			play()
		end
	end,
})

Dropdown = Tab:CreateDropdown({
	Name = "Join Player",
	Options = playerlist,
	CurrentOption = "",
	Flag = "Dropdown1", 
	Callback = function(Option)

	end,
})

if getgenv().Follow ~= nil and getgenv().Follow ~= "" and getgenv().Delay ~= nil then
    Dropdown:Set(getgenv().Follow)
    Toggle2:Set(true)
    Toggle1:Set(true)
    Slider:Set(getgenv().Delay)
    end

game.Players.PlayerAdded:Connect(function(player)
	local name = player.Name
	table.insert(playerlist,name)
	Dropdown:Add(name)
end)

game.Players.PlayerRemoving:Connect(function(player)
	local name = player.Name
	for i,v in pairs(playerlist)do
		if v == name then  
			Dropdown:Remove(v)
		end
	end
end)


local Tab = Window:CreateTab("Manual") -- Title, Image

local Section = Tab:CreateSection("Manual")

local Button = Tab:CreateButton({
	Name = "Guess Word",
	Callback = function()
		if word1 ~= nil then
			--typeout(word1)
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer(word1, w2 + 1)
		else
			--typeout("PLATE")
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
		end
	end,
})

local Paragraph1 = Tab:CreateParagraph({Title = "Word List", Content = ""})

local function replace(str, pos, char)
	if #str:sub(pos - #str) == 5 then 
		return str:sub(1, pos - 1) .. char
	else
		return str:sub(1, pos - 1) .. char .. str:sub(pos - #str)
	end
end

local word;
local absent1 = "";
local correct = "_____";
local usedwords = {};
local badwords = "acock agora arses asses balls bally bigot bitch boink boner bongs boobs booby booty booze boozy breed bulge butte butts butty buxom chink clits cocks cocky comte cooch coons craps cunts daddy damns darky desex dicks dicky dildo donga dongs doozy dopey drugs drunk dyked dykes dykey enema erect ester faggy fagin fagot fanny farts fecal frock fucks fussy gayal gayer gayly goned gooky groin grope gussy hemps hempy hoers homos horny hussy kikes kinks kinky knobs labia lesbo loins lubed lubes luved lynch mahoe mirth moans mussy nonce noose nuder nudes opium penis pervo pervy pissy poops poopy porno porns porny prick pubes pubic pubis pupal pussy queer randy raped rapes semen sexed sexer sexto sexts shaft shags shite shits skeet skink slave sluts snuff spank sperm spick spics spiks spunk swank taint teats testy throb titis titre titty trump turds twats twink unsex urine veiny vulva vying wench wanks whore willy wussy"

local index = 0

game.ReplicatedStorage.Remotes.SubmitGuess.OnClientEvent:Connect(function(p25, p26, p27, p28, p29)
	if p29 ~= nil and word ~= nil then
		index = index + 1
		print("WORD #".. tostring(index)..": "..word)
		correct = "_____";
		absent1 = "";
		usedwords = {};
		Paragraph1:Set({Title = "Word List", Content = ""})
		if Toggle1.CurrentValue == true then
			--typeout("PLATE")
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
		end
		return
	end
	if p25 == true and word then
		table.insert(usedwords, word)
		local present = "_____";
		local absent = {};
		local letters = string.split(word, "")
		for i,v in pairs(letters) do 
			if p26[i] == "present" then
				present =  replace(present, i, v)  
			end
			if p26[i] == "correct" then
				correct = replace(correct, i, v)
			end
		end
		for i,v in pairs(letters) do 
			if p26[i] == "absent" then
				if not table.find(absent, v) and not table.find(string.split(absent1, ""), v) and not table.find(string.split(present, ""), v) and not table.find(string.split(correct, ""), v) then
					table.insert(absent, v)
				end
			end
		end
		for i,v in pairs(absent) do 
			absent1 = absent1..v
		end
		local taa = {
			absent1;
			present;
			correct;
		}
		--print(table.unpack(taa))
		local a = game:HttpGet("https://www.thewordfinder.com/wordle-solver/solve.php?w="..correct.."&b="..absent1.."&s=1&v="..present.."&")
		local b = game.HttpService:JSONDecode(a)
		local results = {}
		for i,v in pairs(b["results"]) do 
			if not table.find(usedwords, v:upper()) and not table.find(string.split(badwords, " "),  v:lower())then
				table.insert(results, v:upper())
			end
		end
		if not table.find(string.split(correct, ""), "_") and word ~= nil then
			print("WORD #".. tostring(index + 1)..": "..word)
		end
		if #results ~= 0 and #results ~= nil then
			local result12 = results[math.random(1, #results)]
			word1 = result12
			w2 = p28
		end
		if Toggle1.CurrentValue == true and #results ~= nil and #results ~= 0 then
			local result = results[math.random(1, #results)]

			if (Slider.CurrentValue >= 1 and Slider.CurrentValue <= 1.5) then
				wait(1.8)
			else
				if Slider.CurrentValue ~= 0 then
					wait(Slider.CurrentValue)
				end
			end
			--typeout(result)
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer(result, p28 + 1)
			--[[
			if Slider.CurrentValue >= 1 then
				game:GetService("Players").LocalPlayer.PlayerScripts.Main.Typed:Fire("Return")
			else
				game.ReplicatedStorage.Remotes.SubmitGuess:FireServer(result, p28 + 1)
			end--]]
			local newresults = {}
			if #results > 8 then
				for i,z in pairs(results) do 
					if not table.find(newresults, z) then
						table.insert(newresults, z)
					end
					if i >= 8 then
						break
					end
				end
			else
				newresults = results
			end
			Paragraph1:Set({Title = "Word List", Content = table.concat(newresults, " ")})
		else
			local newresults = {}
			if #results > 8 then
				for i,z in pairs(results) do 
					if not table.find(newresults, z) then
						table.insert(newresults, z)
					end
					if i >= 8 then
						break
					end
				end
			else
				newresults = results
			end
			Paragraph1:Set({Title = "Word List", Content = table.concat(newresults, " ")})
		end
	end
end)

for i,v in pairs(workspace.GameSlots:GetChildren()) do 
	v.ChildAdded:Connect(function(child)
		if child.Name == "Panel_"..tostring(game.Players.LocalPlayer.Name) and Toggle1.CurrentValue == true then
			if Slider.CurrentValue ~= 0 then
				--wait(3)
			end
			--typeout("PLATE")
			wait()
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
		end
	end)
	v.UI.Players.ChildAdded:Connect(function(child)
		if (child.Name == Dropdown.CurrentOption and Dropdown.CurrentOption ~= "" and game.Players:FindFirstChild(Dropdown.CurrentOption) and Dropdown.CurrentOption ~= game.Players.LocalPlayer.Name and Toggle2.CurrentValue == true) then
			wait(2)
			game:GetService("ReplicatedStorage").Remotes.GoToSlot:FireServer(v)
		end
	end)
end

if Toggle2.CurrentValue == true then
	play()
end
game.ReplicatedStorage.Remotes.GameOver.OnClientEvent:Connect(function()
	Paragraph1:Set({Title = "Word List", Content = ""})
	word1 = nil
	absent1 = "";
	correct = "_____";
	usedwords = {};
	index = 0;
	print("")
	wait(3)
	if Toggle2.CurrentValue == true then
		play()
	end
end)
for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
	v:Disable()
end
local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)
local mt = getrawmetatable(game)
local backupnamecall = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(Self, ...)
	local args = {...}
	local method = getnamecallmethod()

	if (method == "FireServer") then
		if Self == game.ReplicatedStorage.Remotes.SubmitGuess then
			word = args[1]
		end
	end
	return backupnamecall(Self, ...)
end)
setreadonly(mt, true)

spawn(function()
	while wait(1) do 
		if Toggle2.CurrentValue == true and game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.FinishedPanel.Visible == true then
			game:GetService("ReplicatedStorage").Remotes.OptOut:FireServer()
		end
	end
end)
