getgenv().AutoGuess = true

getgenv().AutoPlay = true
getgenv().Mode = "Practice" -- Battle, Frenzy, Expert, Master
getgenv().Follow = "" -- if you want to follow someone (used in combination with Users below)
getgenv().Users = {""} -- if you want to run a bot lobby for more xp, then add your alts usernames seperated by a comma here

local function replace(str, pos, char)
	if #str:sub(pos - #str) == 5 then 
		return str:sub(1, pos - 1) .. char
	else
		return str:sub(1, pos - 1) .. char .. str:sub(pos - #str)
	end
end

local word;
local absent1 = "";
local correct = "_____";
local usedwords = {};
local index = 0

game.ReplicatedStorage.Remotes.SubmitGuess.OnClientEvent:Connect(function(p25, p26, p27, p28, p29)
	if p29 ~= nil then
		index = index + 1
		print("WORD #".. tostring(index)..": "..word)
		correct = "_____";
		absent1 = "";
		usedwords = {};
		if getgenv().AutoGuess == true then
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
		end
		return
	end
	if p25 == true and word then
		table.insert(usedwords, word)
		local present = "_____";
		local absent = {};
		local letters = string.split(word, "")
		for i,v in pairs(letters) do 
			if p26[i] == "present" then
				present =  replace(present, i, v)  
			end
			if p26[i] == "correct" then
				correct = replace(correct, i, v)
			end
		end
		for i,v in pairs(letters) do 
			if p26[i] == "absent" then
				if not table.find(absent, v) and not table.find(string.split(absent1, ""), v) and not table.find(string.split(present, ""), v) and not table.find(string.split(correct, ""), v) then
					table.insert(absent, v)
				end
			end
		end
		for i,v in pairs(absent) do 
			absent1 = absent1..v
		end
		local taa = {
			absent1;
			present;
			correct;
		}
		--print(table.unpack(taa))

		local a = game:HttpGet("https://www.thewordfinder.com/wordle-solver/solve.php?w="..correct.."&b="..absent1.."&s=1&v="..present.."&")

		local b = game.HttpService:JSONDecode(a)
		local results = {}
		for i,v in pairs(b["results"]) do 
			if not table.find(usedwords, v:upper()) then
				table.insert(results, v:upper())
			end
		end

		if not table.find(string.split(correct, ""), "_") then
			print("WORD #".. tostring(index + 1)..": "..word)
		end

		if getgenv().AutoGuess == true then
			game.ReplicatedStorage.Remotes.SubmitGuess:FireServer(results[1], p28 + 1)
		else
			print(table.unpack(results))

			print("-------------------------------------")
		end
	end
end)


if getgenv().AutoGuess == true then
	if getgenv().Follow == "" then
		for i,v in pairs(workspace.GameSlots:GetChildren()) do 
			v.ChildAdded:Connect(function(child)
				if child.Name == "Panel_"..tostring(game.Players.LocalPlayer.Name) then
					wait(2)
					game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
				end
			end)
		end
	end
	if getgenv().Follow ~= "" and getgenv().Follow ~= game.Players.LocalPlayer.Name and table.find(getgenv().Users, game.Players.LocalPlayer.Name) then
		print("You are the follower")
		for i,v in pairs(workspace.GameSlots:GetChildren()) do 
			v.ChildAdded:Connect(function(child)
				if child.Name == "Panel_"..getgenv().Follow then
					wait(2)
					game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
				end
			end)
		end
	end
	if getgenv().Follow == game.Players.LocalPlayer.Name then
		print("You are the leader")
		for i,v in pairs(workspace.GameSlots:GetChildren()) do 
			v.ChildAdded:Connect(function(child)
				if child.Name == "Panel_"..game.Players.LocalPlayer.Name then
					wait(2)
					game.ReplicatedStorage.Remotes.SubmitGuess:FireServer("PLATE", 1)
				end
			end)
		end
	end
end


game.ReplicatedStorage.Remotes.GameOver.OnClientEvent:Connect(function()
	absent1 = "";
	correct = "_____";
	usedwords = {};
	index = 0;
	print("returning")
	wait(3)
	if getgenv().AutoPlay == true then
		local slot;

		local args = {
			[1] = {
				["Privacy"] = 0,
				["Words"] = 1,
				["TimerGame"] = 120,
				["Color"] = nil --[[Color3]],
				["Anchored"] = true,
				["Lockdown"] = true,
				["Letters"] = 5,
				["Guesses"] = 0,
				["Pre_Correct"] = 0,
				["Pre_Present"] = 0,
				["Players"] = 100,
				["TimerRows"] = 60
			},
			[2] = true,
			[3] = getgenv().Mode
		}
		if getgenv().Follow ~= "" and getgenv().Follow ~= game.Players.LocalPlayer.Name and table.find(getgenv().Users, game.Players.LocalPlayer.Name) then
			for i,v in pairs(workspace.GameSlots:GetChildren()) do 
				v.UI.Players.ChildAdded:Connect(function(child)
					if child.Name == getgenv().Follow then
						wait(2)
						game:GetService("ReplicatedStorage").Remotes.GoToSlot:FireServer(v)
					end
				end)
			end
		end
		if getgenv().Follow == game.Players.LocalPlayer.Name then
			for i,v in pairs(workspace.GameSlots:GetChildren()) do 
				if not v:FindFirstChildWhichIsA("Model") then
					slot = v
					game:GetService("ReplicatedStorage").Remotes.GoToSlot:FireServer(v)
					break
				end
			end

			game:GetService("ReplicatedStorage").Remotes.ChooseMode:FireServer(unpack(args))
			wait(1)
			local names = {}
			slot.UI.Players.ChildAdded:Connect(function(child)
				if table.find(getgenv().Users, child.Name) then 
					print(child.Name)
					table.insert(names, child.Name)
				end
			end)
			slot.UI.Players.ChildRemoved:Connect(function(child)
				if table.find(names, child.Name) then 
					table.remove(names, names[child.Name])
				end
			end)
			print(table.unpack(names))
			print(table.unpack(getgenv().Users))
			print(table.unpack(names) == table.unpack(getgenv().Users))
			repeat wait(1) until table.unpack(names) == table.unpack(getgenv().Users)

			game:GetService("ReplicatedStorage").Remotes.StartGame:FireServer(unpack(args))
		else
			return
		end
		if getgenv().Follow == "" then
			print("You are not following anyone")
			for i,v in pairs(workspace.GameSlots:GetChildren()) do 
				if not v:FindFirstChildWhichIsA("Model") then
					slot = v
					game:GetService("ReplicatedStorage").Remotes.GoToSlot:FireServer(v)
					break
				end
			end
			game:GetService("ReplicatedStorage").Remotes.ChooseMode:FireServer(unpack(args))
			wait(1)
			game:GetService("ReplicatedStorage").Remotes.StartGame:FireServer(unpack(args))
		end
	end
end)

local mt = getrawmetatable(game)
local backupnamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(Self, ...)
	local args = {...}
	local method = getnamecallmethod()

	if (method == "FireServer") then
		if Self == game.ReplicatedStorage.Remotes.SubmitGuess then
			word = args[1]
		end
	end
	return backupnamecall(Self, ...)
end)

setreadonly(mt, true)
